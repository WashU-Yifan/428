1.Yifan Wang 488500

2
    my_struct s1(1),s2(2);
    cout<<"s1: "<<s1.i<<", s2: "<<s2.i<<endl;

    s1: 1, s2: 2

3.

lines added:
    my_struct(const my_struct&)=delete;
    my_struct& operator=(const my_struct&)=delete;
    //~my_struct()=delete;

    destructor can't be deleted, because we are instantiating an objec of my_struct type,
    an object instance must evoke its destructor after it goes out of scope.


4. 
Code:
    my_struct s1(1),s2(2);
    cout<<"s1: "<<s1.i<<", s2: "<<s2.i<<endl;
    std::swap(s1,s2);
    cout<<"s1: "<<s1.i<<", s2: "<<s2.i<<endl;
Output:
    s1: 1, s2: 2
    s1: 2, s2: 1

5.

    copy constructor and copy assign operator are required to perform the swap operation.

6.
header file:

    #pragma once
    template<typename T=int>
    struct my_struct{
        T i;
        my_struct( T&);
    };
    #ifdef TEMPLATE_HEADERS_INCLUDE_SOURCE
        #include "12.cpp"
    #endif

source file:
    #include "12.h"

    template<typename T>
    my_struct<T>:: my_struct( T& t):i(t){}


