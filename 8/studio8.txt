1. Yifan Wang 488500

2.
  base::base()
    base::base()
    derived::derived()
    derived fetched by ptr 1:  derived
    derived fetched by ptr 2:  base
    base fetched by ptr 3:  base
    derived::~derived()
    base::~base()
    base::~base()  

Code:
    base b;
    derived d;
    const string derived::*dp1=&derived::s;
    const string derived::*dp2=&base::s;
    const string base::*bp=&base::s;
    cout<<"derived fetched by ptr 1:  "<<d.*dp1<<endl;
    cout<<"derived fetched by ptr 2:  "<<d.*dp2<<endl;
    cout<<"base fetched by ptr 3:  "<<b.*bp<<endl;
    return success;

3.
    base b;
    derived d;
    const string derived::*dp1=derived::sp();
    const string derived::*dp2=base::sp();
    const string base::*bp=base::sp();
    cout<<"derived fetched by ptr 1:  "<<d.*dp1<<endl;
    cout<<"derived fetched by ptr 2:  "<<d.*dp2<<endl;
    cout<<"base fetched by ptr 3:  "<<b.*bp<<endl;
    return success;

  4
   void (base::*bfp)();
    bfp=&base::foo;
    void (derived::*dfp1)();
    dfp1=&base::foo;
    auto dfp2=&derived::foo;
    cout<<"base foo evoked by base ptr:  "<<(b.*bfp)()<<endl;
    cout<<"derived foo evoked by derived pointing to base:  "<<(d.*dfp1)()<<endl;
    cout<<"derived foo evoked by derived pointing to derived: "<<(d.*dfp2)()<<endl;

    base::base()
    base::base()
    derived::derived()
    base foo evoked by base ptr:  
    base::foo()
    derived foo evoked by derived pointing to base:  
    derived::foo()
    derived foo evoked by derived pointing to derived: 
    derived::foo()
    derived::~derived()
    base::~base()
    base::~base()

5.
  Since the foo() function is no longer virtual, even though it's called by a pointer,
  the version of foo() will be decided during compile time. Then the base version will be called. 
    base::base()
    base::base()
    derived::derived()
    base foo evoked by base ptr:  
    base::foo()
    derived foo evoked by derived pointing to base:  
    base::foo()
    derived foo evoked by derived pointing to derived: 
    derived::foo()
    derived::~derived()
    base::~base()
    base::~base()


  6:
      function<void(base&)>basefoo=&base::foo;
      function<void(derived&)>dfoo1=&base::foo;
      function<void(derived&)>dfoo2=&derived::foo; 
      cout<<"base foo evoked by base :  "<<endl;
      basefoo(b);
      cout<<"base foo evoked by derived :  "<<endl;
      dfoo1(d);
      cout<<"derived foo evoked by derived : "<<endl;
      dfoo2(d);

  7
    auto bf=mem_fn(&base::foo);
    auto df=mem_fn(&derived::foo);
    cout<<"base foo evoked by base :  "<<endl;
    bf(b);
    cout<<"base foo evoked by derived :  "<<endl;
    bf(d);
    cout<<"derived foo evoked by derived : "<<endl;
    df(d);

