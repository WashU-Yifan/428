1 Yifan Wang 488500

2.
    base::base()
    base::base()
    derived::derived()
    derived::~derived()
    base::~base()
    base::~base()

    When calling derived class's default constructor, the base class constructor is first
    called. When destructing a derived class object, the derived part is destructed first,
    then the base class's destructor is evoked to destroy the base part.

3.
[wang.y1@shell 7]$ ./7
base::base()
base::base()
derived::derived()
base object function call
base::foo()
derived object function call
derived::foo()
base reference base function call
base::foo()
base reference derived function call
base::foo()
derived reference function call
derived::foo()
derived::~derived()
base::~base()
base::~base()

4:
base::base()
base::base()
derived::derived()
base object function call
base::foo()
derived object function call
derived::foo()
base reference base function call
base::foo()
base reference derived function call
derived::foo()
derived reference function call
derived::foo()
derived::~derived()
base::~base()
base::~base()

5:
base::base()
base::base()
derived::derived()
base pointer function call
base::foo()
base points to derived function call
derived::foo()
derived pointer function call
derived::foo()
derived::~derived()
base::~base()
base::~base()

    When the type that calls the function is a reference or pointer type, the function call
    is resolved in run type not compile time. By defining the function as virtual means the 
    derived class will support override function and shalled be invoked during run time.

6.
base::base()
base::base()
derived::derived()
base::base()
derived::derived()
base shared pointer function call
base::foo()
base points to derived function call
derived::foo()
derived shared pointer function call
derived::foo()
derived::~derived()
base::~base()
derived::~derived()
base::~base()
base::~base(

7:
base::base()
base::base()
derived::derived()
base::base()
derived::derived()
base pointer function call
base::foo()
base points to derived function call
derived::foo()
derived  pointer function call
derived::foo()
 
    The plain pointer still evoke the overrided virtual function as the shared_ptrs do.
    But the destructor was not evoked as the main function returns.

8;
base::base()
base::base()
derived::derived()
base::base()
derived::derived()
base pointer function call
base::foo()
base points to derived function call
derived::foo()
derived  pointer function call
derived::foo()
base::~base()
base::~base()
derived::~derived()
base::~base()

9:
base::base()
base::base()
derived::derived()
base::base()
derived::derived()
base pointer function call
base::foo()
base points to derived function call
derived::foo()
derived  pointer function call
derived::foo()
base::~base()
derived::~derived()
base::~base()
derived::~derived()
base::~base())


The destructor must be virtual or other wise the derived portion of the object
might not be freed after the program finished, leading to memory leak.