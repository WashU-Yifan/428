1 Yifan Wang 488500

2.

    Without declaring constructor:

        Got warning from compiler:
            [wang.y1@shell Studio5]$ make
            g++ -o s5 -DUNIX   -Wall -W -g -std=c++17 -DTEMPLATE_HEADERS_INCLUDE_SOURCE s5.cpp 
            s5.cpp: In function 'int main()':
            s5.cpp:7:14: warning: 'p1.point2D::x' is used uninitialized in this function [-Wuninitialized]
                cout<<p1.x<<p1.y<<endl;
                        ^
            s5.cpp:7:20: warning: 'p1.point2D::y' may be used uninitialized in this function [-Wmaybe-uninitialized]
                cout<<p1.x<<p1.y<<endl;
                                ^
        Ouput of the program:
            [wang.y1@shell Studio5]$ ./s5 
            00

    With defined constructor:
        Not warning from the compiler, but have to remove the excutable first before compiling.

    
        Output:
            [wang.y1@shell Studio5]$ ./s5
            00

3.

    The access privilige of variables in a struct is public by default. However, the privilige
is private in a class. 
   
                                     Public     protected   private
member access outside the class      Y            N           N


4.
    Not able to evoke mutator on const object

    Here is the program output after removing that line:

        access on nonconst: 0
        mutate then access on nonconst: 1
        access on nonconst: 0

Code:
    Source file:
        point2D1 p1;
        cout<<"access on nonconst: "<<p1.get_x()<<endl;
        cout<<"mutate then access on nonconst: "<<p1.set_x(1).get_x()<<endl;
        const point2D1 p2;
        cout<<"access on nonconst: "<<p2.get_x()<<endl;
        //cout<<"mutate then access on const: "<<p2.set_x(1).x()<<endl;

    Header file:
        private:
            int x,y;
        public:
            point2D1():x(0),y(0){}
            int get_x()const{return x;}
            int get_y()const{ return y;}
            point2D1& set_x(int _x){x=_x; return *this;}
            point2D1& set_y(int _y){y=_y; return *this;}

5.
    Output
        m.x is 0 and m.y is 0
        m.x is 7 and m.y is 3
        n.x is 7 and n.y is 3
        
    default constructor initializes the variables to 0,
    default copy constructor copy the values into the new object.